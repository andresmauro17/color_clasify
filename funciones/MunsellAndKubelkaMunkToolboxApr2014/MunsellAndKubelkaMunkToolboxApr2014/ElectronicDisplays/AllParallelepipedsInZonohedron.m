function [AllParallelepipeds] = AllParallelepipedsInZonohedron(NumberOfGeneratingVectors)
% Purpose		Find all the parallelepipeds in the zonohedron generated by an input set of
%				three-dimensional vectors, all of whose entries are non-negative.  The
%				generating vectors must be in general position: no input 
%				vector can be identically 0, no two input vectors can be parallel, and no
%				three input vectors can be linearly dependent.  The parallelepipeds are 
%				those whose vertices are all nodes, that is linear combinations of the 
%				generating vectors with all coefficients either 0 or 1.
%
% Description	A zonohedron is the set of all linear combinations of a set of generating
%				vectors, such that the coefficients of any linear combination is between
%				0 and 1, inclusive.  A zonohedron is a convex polytope.  Each edge of the
%				zonohedron is a translation of one of the generating vectors.  Each face 
%				of the zonohedron is a parallelogram.  The coefficients of the linear
%				combinations that make up the vertices are all either 0 or 1.  
%
%				This routine 
%
%				GeneratingVectors	A set of three-dimensional vectors in the positive octant.  The
%									zero vector is not allowed, and not two vectors may be parallel.
%
%				Vertices			A three-column matrix.  Each row gives the three-dimensional
%									coordinates of a vertex of the generated zonohedron.
%
%				Edges				A two-column matrix.  Each row gives an edge of the generated
%									zonohedron.  The entries of the matrix refer to the rows of the
%									Vertices matrix.  For example, the row [5,7] in the Edges matrix
%									means that the zonohedron contains an edge between the 5th and
%									7th rows (each of which is the three-dimensional coordinates of
%									a vertex) in the Vertices matrix.
%
%				Faces				A four-column matrix.  Each row gives a face of the generated
%									zonohedron.  The entries of the matrix refer to the rows of the
%									Vertices matrix.  For example, the row [5,7,3,2] in the Edges 
%									matrix means that the zonohedron contains a face whose vertices
%									are the 5th, 7th, 3rd, and 2nd rows of the Vertices matrix.  The
%									vertices are listed in either clockwise or counterclockwise
%									order, for easy plotting.  
%
%				VertexCoefficients	Each vertex is a linear combination of the generating vectors.
%									The ith row of the matrix VertexCoefficients gives the
%									coefficients of the generating vectors for the ith vertex, which
%									is given in the ith row of the matrix Vertices.
%
% Author		Paul Centore (March 30, 2014)
%
% Copyright 2014 Paul Centore
%
%    This file is part of MunsellAndKubelkaMunkToolbox.
%
%    MunsellAndKubelkaMunkToolbox is free software: you can redistribute it and/or modify
%    it under the terms of the GNU General Public License as published by
%    the Free Software Foundation, either version 3 of the License, or
%    (at your option) any later version.
%
%    MunsellAndKubelkaMunkToolbox is distributed in the hope that it will be useful,
%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%    GNU General Public License for more details.
%
%    You should have received a copy of the GNU General Public License
%    along with MunsellAndKubelkaMunkToolbox.  If not, see <http://www.gnu.org/licenses/>.

CoefficientsOfNodes = powerset(1:NumberOfGeneratingVectors)	;
NumberOfNodes       = size(CoefficientsOfNodes,2)			;
Nodes               = []									;
for ctr = 1:NumberOfNodes
    LineForNodes = zeros(1,NumberOfGeneratingVectors)	;
    LineForNodes(CoefficientsOfNodes{1,ctr}) = 1;
    Nodes =[Nodes; LineForNodes]	;
end
Nodes
 
AllParallelepipeds = []	;
for ctr = 1:NumberOfNodes
	ElementsInSubset  = CoefficientsOfNodes{1,ctr}								;
	RemainingElements = setdiff(1:NumberOfGeneratingVectors, ElementsInSubset) 	;
	NumberOfRemainingElements = length(RemainingElements) 						;
	if NumberOfRemainingElements >= 3
		Triplets = combinator(NumberOfRemainingElements,3,'c')	;
		NumberOfTriplets = size(Triplets,1)						;
		for idx = 1:NumberOfTriplets
%			Threesome = RemainingElements(Triplets(idx,1))		;
			LineInAllParallelepipeds = Nodes(ctr,:) 			;
			LineInAllParallelepipeds(RemainingElements(Triplets(idx,:))) = -1 ;
			AllParallelepipeds = [AllParallelepipeds; LineInAllParallelepipeds]	;
		end
	end
end
AllParallelepipeds